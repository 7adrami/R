acp_sup =PCA(exo3[, 1:10], quanti.sup = 11:13)
#6)
# Acp avec les variables supplémantaire
acp_sup =PCA(exo3[, 1:10], quanti.sup = 11:13)
acp_sup =PCA(exo3[, 1:10], quanti.sup = 11:13)
acp_sup =PCA(exo3[, 1:10], quanti.sup = 11:13)
#4)
#l'ACP avec les variables de 1:10
acp_exo3 = PCA(exo3[, 1:10], cex=0.5)
#4)
#l'ACP avec les variables de 1:10
acp_exo3 = PCA(exo3[, 1:10], cex=0.5)
#4)
#l'ACP avec les variables de 1:10
acp_exo3 = PCA(exo3[, 1:10], cex=0.5)
plot(acp_exo3, cex=0.5)
plot(acp_exo3, cex=0.2)
plot(acp_exo3, cex=0.4)
library(tidyverse)
library(shiny)
library(DT)
library(plotly)
#####create some data to interact with in the application
####could import data with read_csv or a similar function here if you wanted.
cities=c("Hong Kong","Macau","Dubai")
city1 <- data.frame("city"=rep(cities[1],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
city2 <- data.frame("city"=rep(cities[2],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
city3 <- data.frame("city"=rep(cities[3],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
all_data <- bind_rows(city1,city2,city3)
# Define UI for different kinds of input
#Without any arguments in the functions, creating a skeleton of a UI would look like this:
# ui<-fluidPage(
#   sliderInput(),
#   checkboxGroupInput(),
#   tableOutput(),
#   h1(), ####You can use HTML tags to write text -- for all of the options, see ?shiny::builder
#   h2(),
#   p(),
####and so on
# )
ui <- fluidPage(
h1("This is a Website created by Hadrami Sidi Baba"),
p("This is a subtext"),
h2("Text Input"),
textInput(inputId="text",
label="Enter some text here",
value="This your entered text (you can replace it)"),
h2("Text Output"),
textOutput(outputId = "text_output"),
#######the complement to this is the server below is output$text_output<-renderText(input$text)
h2("Print Output"),
p("With print output, whatever your R console produced from an expression will be printed in the Shiny app. This is not usually preferred, because it is going to be unattractive."),
verbatimTextOutput(outputId = "print1"),
#######the complement to this is the server below is output$print1<-renderPrint(table(all_data$var1))
h2("Slider Input with Two Sliders"),
sliderInput(inputId="year1",
label="Select Year",
min=1990,
max=1994,
value=c(1990,1994),
sep=""),
h2("Checkbox Input"),
checkboxGroupInput(inputId="city1",
label="Which City Do you Want to Display?",
choices=cities,
selected=cities),
#####this tells the user interface that the output$["table"] will do here
h2("A standard table"),
tableOutput(outputId = "table1"),
#### matched with output$table1 <- renderTable(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year    <=input$year1[2]))
h2("A data table"),
dataTableOutput(outputId = "table2"),
#### matched withoutput$table2 <- renderDataTable(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]))
h2("A standard plot"),
plotOutput(outputId = "plot1"),
#### matched with output$plot1 <- renderPlot(ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1,y=var2))+geom_point())
h2("A plotly plot"),
plotlyOutput(outputId = "plot2")
#### matched with output$plot2 <- renderPlotly(ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1))+geom_histogram())
)
########write the server function that will generate the plots and tables to add to output
server <- function(input, output) {
output$text_output<-renderText({input$text})
output$print1<-renderPrint({table(all_data$var1)})
output$table1 <- renderTable({
filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2])})
output$table2 <- renderDataTable({
filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2])})
output$plot1 <- renderPlot({
ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1,y=var2))+
geom_point()})
output$plot2 <- renderPlotly({
ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1))+
geom_histogram()})
}
# Run the application
shinyApp(ui = ui, server = server)
#Exercice 1
#1)
#importation des données
data = read.csv2("C:/Users/HADRAMI/Downloads/TP_ACP_Exo1.csv", header = TRUE, row.names = 1)
View(data)
#matrice de corrélation
cor(data)
#Realisation de l'ACP
library(FactoMineR)
acp = PCA(data)
View(data).
library(tidyverse)
library(shiny)
library(DT)
library(plotly)
#####create some data to interact with in the application
####could import data with read_csv or a similar function here if you wanted.
cities=c("Hong Kong","Macau","Dubai")
city1 <- data.frame("city"=rep(cities[1],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
city2 <- data.frame("city"=rep(cities[2],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
city3 <- data.frame("city"=rep(cities[3],5),
"year"=as.integer(seq(from=1990,to=1994,by=1)),
#"unit"=letters[1:5],
"var1"=round(runif(5,0,5),0),
"var2"=round(runif(5,0,5),0),
"var3"=round(runif(5,0,5),0))
all_data <- bind_rows(city1,city2,city3)
# Define UI for different kinds of input
#Without any arguments in the functions, creating a skeleton of a UI would look like this:
# ui<-fluidPage(
#   sliderInput(),
#   checkboxGroupInput(),
#   tableOutput(),
#   h1(), ####You can use HTML tags to write text -- for all of the options, see ?shiny::builder
#   h2(),
#   p(),
####and so on
# )
ui <- fluidPage(
h1("This is a Website created by Hadrami Sidi Baba"),
p("This is a subtext"),
h2("Text Input"),
textInput(inputId="text",
label="Enter some text here",
value="This your entered text (you can replace it)"),
h2("Text Output"),
textOutput(outputId = "text_output"),
#######the complement to this is the server below is output$text_output<-renderText(input$text)
h2("Print Output"),
p("With print output, whatever your R console produced from an expression will be printed in the Shiny app. This is not usually preferred, because it is going to be unattractive."),
verbatimTextOutput(outputId = "print1"),
#######the complement to this is the server below is output$print1<-renderPrint(table(all_data$var1))
h2("Slider Input with Two Sliders"),
sliderInput(inputId="year1",
label="Select Year",
min=1990,
max=1994,
value=c(1990,1994),
sep=""),
h2("Checkbox Input"),
checkboxGroupInput(inputId="city1",
label="Which City Do you Want to Display?",
choices=cities,
selected=cities),
#####this tells the user interface that the output$["table"] will do here
h2("A standard table"),
tableOutput(outputId = "table1"),
#### matched with output$table1 <- renderTable(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year    <=input$year1[2]))
h2("A data table"),
dataTableOutput(outputId = "table2"),
#### matched withoutput$table2 <- renderDataTable(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]))
h2("A standard plot"),
plotOutput(outputId = "plot1"),
#### matched with output$plot1 <- renderPlot(ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1,y=var2))+geom_point())
h2("A plotly plot"),
plotlyOutput(outputId = "plot2")
#### matched with output$plot2 <- renderPlotly(ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1))+geom_histogram())
)
########write the server function that will generate the plots and tables to add to output
server <- function(input, output) {
output$text_output<-renderText({input$text})
output$print1<-renderPrint({table(all_data$var1)})
output$table1 <- renderTable({
filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2])})
output$table2 <- renderDataTable({
filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2])})
output$plot1 <- renderPlot({
ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1,y=var2))+
geom_point()})
output$plot2 <- renderPlotly({
ggplot(filter(all_data,city %in% input$city1 & year>=input$year1[1] & year<=input$year1[2]),aes(x=var1))+
geom_histogram()})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
setwd('C:/Users/HADRAMI/Desktop')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
#setwd('C:/Users/HADRAMI/Desktop')
library(shiny)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
#setwd('C:/Users/HADRAMI/Desktop')
library(shiny)
library(tidyverse)
data = read.csv('C:\Users\dell\Desktop\Hadrami\Desktop\R\tp de R\Hadrami_s_first_web_app\JoGvy_QWS-WBr8v0Fsvllg_389057e650da406fbc1d22caf632bfaf_publish_practice.csv')
data = read.csv('C:/Users/dell/Desktop/Hadrami/Desktop/R/tp de R/Hadrami_s_first_web_app/JoGvy_QWS-WBr8v0Fsvllg_389057e650da406fbc1d22caf632bfaf_publish_practice.csv')
view(data)
data = data %>% select(c(Congress=congress,
Idiologie=dwnom1, Party=dem))
data = read.csv('‪C:\Users\dell\Desktop\Hadrami\Desktop\serie temporelles\treating the TS\cel_volden_wiseman _coursera.csv')
data = read.csv('C:/Users/dell/Desktop/Hadrami/Desktop/serie temporelles/treating the TS/cel_volden_wiseman _coursera.csv')
view(data)
data = read.csv('C:/Users/dell/Desktop/Hadrami/Desktop/serie temporelles/treating the TS/cel_volden_wiseman _coursera.csv', sep = ",")
view(data)
data = data %>% select(c(Congress=congress,
Idiologie=dwnom1, Party=dem))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(readxl)
data = read.csv("C:/Users/HADRAMI/Desktop/serie temporelles/treating the TS/JoGvy_QWS-WBr8v0Fsvllg_389057e650da406fbc1d22caf632bfaf_publish_practice.csv")
library(shiny)
library(tidyverse)
library(readxl)
data = read.csv("C:/Users/dell/Desktop/Hadrami/Desktop/serie temporelles/treating the TS/JoGvy_QWS-WBr8v0Fsvllg_389057e650da406fbc1d22caf632bfaf_publish_practice.csv")
view(data)
dat=data %>% ggplot(aes(x=varX, y=varY, color=Group))+
geom_point()
dat
##Defining th ui
ui = fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
inputId = "checked_group",
label = "which of the groups do you like to display?",
choices = c("a", "b", "c"),
selected = c("a", "b", "c")
)
),
mainPanel(
plotOutput("scatter")
)
)
)
##Define a server
server = function(input, output){
output$scatter = renderPlot({
plotdata=filter(data, Group %in% input$checked_group)
ggplot(plotdata, aes(x=varX, y=varY, color=Group))+geom_point()
})
}
shinyApp(ui=ui, server = server)
library(tidyverse)
library(maps)
library(gganimate)
library(gifski)
##tell us about what is in the library 'maps'
help(package="maps")
?maps_data
my_world_map = map_data('world')
##
ggplot(data = my_world_map, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='white', color='black')
##let's look at a country or many countries
germany = filter(my_world_map, region=="Mauritania")
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='white', color='black')
##
library(summarytools)
library(readxl)
library(dplyr)
library(ggplot2)
ceosal1 <- read_excel("C:/Users/dell/Desktop/econométrie/ceosal1.xlsx")
View(ceosal1)
###1) Résumé statistique des variables
dfSummary(ceosal1)
###2) Analyse du salaire en fonction des autre vairables
# Histogramme du salaire
ggplot(ceosal1, aes(x = salary)) + geom_histogram(binwidth = 100, fill = "black", color = "black") +
labs(title = "Distribution des salaires des PDG",
x = "Salaire (en milliers de dollars)", y = "Fréquence")
# Nuage de points entre SALARY et ROE
ggplot(ceosal1, aes(x = roe, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du rendement des capitaux propres, moyenne 1988-1990", x = "ROE (%)",
y = "Salaire (en milliers de dollars)")
# Nuage de points entre SALARY et PCsalary
ggplot(ceosal1, aes(x = pcsalary, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du % de variation du salaire, 1989-1990", x = "PcSalary (%)",
y = "Salaire (en milliers de dollars)")
# Nuage de points entre SALARY et PCroe
ggplot(ceosal1, aes(x = pcroe, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du  % de variation du rendement des capitaux propres, 1988-1990", x = "Pcroe (%)",
y = "Salaire (en milliers de dollars)")
# Nuage de points entre SALARY et ros
ggplot(ceosal1, aes(x = ros, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du rendement des actions de l'entreprise, 1988-1990", x = "ros (%)",
y = "Salaire (en milliers de dollars)")
# Calcul de la corrélation
cor(ceosal1$salary, ceosal1$roe)
###4)  Estimation du modèle
model = lm(salary ~ roe, data = ceosal1)
summary(model)
###7) Droite de regression
# Affichage de la droite de régression
ggplot(ceosal1, aes(x = roe, y = salary)) + geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Régression linéaire : Salaire en fonction du ROE", x = "ROE (%)",
y = "Salaire (en milliers de dollars)")
###8) Prédiction de l'augmentation du salaire
beta1 <- coef(model)["roe"]
augmentation_salaire <- beta1 * 10
augmentation_salaire
ceosal1$secteur = "indus"
View(ceosal1)
ceosal1$secteur = "indus"
ceosal1$secteur = "indus"
View(ceosal1)
ceosal1$secteur[ceosal1$consprod==1] = "consprod"
ceosal1$secteur[ceosal1$finance==1] = "finance"
ceosal1$secteur[ceosal1$utility==1] = "utility"
View(ceosal1)
install.packages(coreplot)
install.packages(cowrplot)
##let's look at a country or many countries
germany = filter(my_world_map, region=="USA")
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='white', color='black')
##let's look at a country or many countries
germany = filter(my_world_map, region=="Mauritania")
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='white', color='black')
##
ggplot(data = my_world_map, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='grey', color='black')
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='green', color='black')
##
ggplot(data = my_world_map, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='black', color='black')
##
ggplot(data = my_world_map, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='black', color='white')
ggplot(ceosal1, aes(x = salary)) + geom_boxplot(binwidth = 100, fill = "black", color = "black") +
labs(title = "Distribution des salaires des PDG",
x = "Salaire (en milliers de dollars)", y = "Fréquence")
###2) Analyse du salaire en fonction des autre vairables
# Histogramme du salaire
ggplot(ceosal1, aes(x = roe)) + geom_histogram(binwidth = 100, fill = "black", color = "black") +
labs(title = "Distribution des salaires des PDG",
x = "Salaire (en milliers de dollars)", y = "Fréquence")
###2) Analyse du salaire en fonction des autre vairables
# Histogramme du salaire
ggplot(ceosal1, aes(x = salary)) + geom_histogram(binwidth = 100, fill = "black", color = "black") +
labs(title = "Distribution des salaires des PDG",
x = "Salaire (en milliers de dollars)", y = "Fréquence")
dfsummary?
ceosal1$secteur = "indus"
help(dfsummary)
help(dfsummary)
help(dfsummary, package = "summarytools")
descr(ceosal1)
?dfSummary
corrplot(coorelation, type="upper", tl.col"black")
cor(ceosal1$salary, ceosal1$roe)
# Calcul de la corrélation
coorelation = cor(ceosal1$salary, ceosal1$roe)
# Calcul de la corrélation
coorelation = cor(ceosal1$salary, ceosal1$roe)
cor(ceosal1$salary, ceosal1$roe)
###7) Droite de regression
# Affichage de la droite de régression
ggplot(ceosal1, aes(x = roe, y = salary)) + geom_point() +
geom_smooth(method = "lm", col = "red") +
labs(title = "Régression linéaire : Salaire en fonction du ROE", x = "ROE (%)",
y = "Salaire (en milliers de dollars)")
install.packages("carrplot")
install.packages("carrplot")
library(carrplot)
# Calcul de la corrélation
correlation = cor(ceosal1$salary, ceosal1$roe)
corrplot(correlation, type="upper")
library(carrplot)
install.packages("corrplot")
library(corrplot)
library(corrplot)
corrplot(correlation, type="upper")
# Nuage de points entre SALARY et ROE
nuage_roe = ggplot(ceosal1, aes(x = roe, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du rendement des capitaux propres, moyenne 1988-1990", x = "ROE (%)",
y = "Salaire (en milliers de dollars)")
# Nuage de points entre SALARY et PCsalary
nuage_pcsalary = ggplot(ceosal1, aes(x = pcsalary, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du % de variation du salaire, 1989-1990", x = "PcSalary (%)",
y = "Salaire (en milliers de dollars)")
# Nuage de points entre SALARY et PCroe
nuage_pcroe = ggplot(ceosal1, aes(x = pcroe, y = salary)) + geom_point() +
labs(title = "Salaire en fonction du  % de variation du rendement des capitaux propres, 1988-1990", x = "Pcroe (%)",
y = "Salaire (en milliers de dollars)")
plot_grid(nuage_pcroe, nuage_pcsalary)
plot_grid(nuage_pcroe, nuage_pcsalary, ncol = 3)
library(cowplot)
library(cowplot)
plot_grid(nuage_pcroe, nuage_pcsalary, ncol = 3)
corrplot()
corrplot(corr = correlation, type = "upper", tl.col = "black")
corrplot(corr = correlation, type = "upper", method = "circle",tl.col = "black")
corrplot(
correlation,
method = c("circle", "square", "ellipse", "number", "shade", "color", "pie"),
type = c("full", "lower", "upper"))
library(corrplot)
corrplot(
correlation,
method = c("circle", "square", "ellipse", "number", "shade", "color", "pie"),
type = c("full", "lower", "upper"))
library(tidyverse)
library(maps)
library(gganimate)
library(gifski)
##tell us about what is in the library 'maps'
help(package="maps")
?maps_data
my_world_map = map_data('world')
##
ggplot(data = my_world_map, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='black', color='white')
##let's look at a country or many countries
germany = filter(my_world_map, region=="Mauritania")
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='green', color='black')
##
#germany_france = filter(my_world_map, region=="Germany" region =="France")
##let's look at a country or many countries
germany = filter(my_world_map, region=="Italy")
ggplot(data = germany, mapping = aes(x=long, y=lat, group=group))+
geom_polygon(fill='green', color='black')
